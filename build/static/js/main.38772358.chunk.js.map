{"version":3,"sources":["quoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","state","quotes","randomQuote","author","tweetQuote","event","url","encodeURI","_this","window","open","getRandomQuote","randomVal","Math","floor","random","length","setState","quote","animateOpacity","e","element","document","getElementById","addEventListener","preventDefault","classList","remove","offsetWidth","add","addOpacityAnimation","_this2","this","axios","get","then","response","data","catch","error","console","_this3","react_default","a","createElement","className","id","title","href","onClick","props","changeColor","Component","App","currentColor","colors","applyColorChange","style","backgroundColor","color","quoteMachine","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38772358.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass QuoteMachine extends Component {\r\n  state = {\r\n    quotes: [],\r\n    randomQuote: \"\",\r\n    author: \"\"\r\n  };\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\r\n      )\r\n      .then(response => {\r\n        this.setState({\r\n          quotes: response.data.quotes\r\n        });\r\n      })\r\n      .then(() => this.getRandomQuote())\r\n      .catch(error => console.error(error));\r\n  }\r\n\r\n  tweetQuote = event => {\r\n    const url =\r\n      \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\" +\r\n      encodeURI('\"' + this.state.randomQuote + '\"\\n-' + this.state.author);\r\n    window.open(url);\r\n  };\r\n\r\n  getRandomQuote = event => {\r\n    const randomVal = Math.floor(Math.random() * this.state.quotes.length);\r\n    this.setState({\r\n      randomQuote: this.state.quotes[randomVal].quote,\r\n      author: this.state.quotes[randomVal].author\r\n    });\r\n  };\r\n\r\n  /*setColor = () => {\r\n    const newColor = this.state.colors[\r\n      Math.floor(Math.random() * this.state.colors.length)\r\n    ];\r\n    let appNode = document.getElementById(\"body\");\r\n    appNode.style.backgroundColor = newColor;\r\n    appNode.style.color = newColor;\r\n  };*/\r\n\r\n  animateOpacity = e => {\r\n    var element = document.getElementById(\"quote-box\");\r\n    element.addEventListener(\r\n      \"click\",\r\n      function(e) {\r\n        e.preventDefault();\r\n        element.classList.remove(\"quote-box-animation\");\r\n        void element.offsetWidth;\r\n        element.classList.add(\"quote-box-animation\");\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  addOpacityAnimation = () => {\r\n    document.getElementById(\"quote-box\").classList.add(\"quote-box-animation\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container\" id=\"quote-box\">\r\n          <h1 className=\"flow-text\" id=\"title\">\r\n            Quote machine\r\n          </h1>\r\n          <div className=\"col-12\" id=\"text\">\r\n            {this.state.randomQuote}\r\n          </div>\r\n          <div className=\"right-align\" id=\"author\">\r\n            {\"-\" + this.state.author}\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"btn col s2 \" title=\"Share on Facebook\">\r\n              <i className=\"fab fa-facebook-f\" />\r\n              <span className=\"hide-on-med-and-down\">Facebook</span>\r\n            </div>\r\n            <a\r\n              className=\"btn col s2 \"\r\n              id=\"tweet-quote\"\r\n              href=\"# \"\r\n              onClick={this.tweetQuote}\r\n              title=\"Tweet quote\"\r\n            >\r\n              <i className=\"fab fa-twitter\" />\r\n              <span className=\"hide-on-med-and-down\">Twitter</span>\r\n            </a>\r\n\r\n            <div\r\n              className=\"btn col s3 right\"\r\n              onClick={() => {\r\n                this.getRandomQuote();\r\n                this.props.changeColor();\r\n                this.addOpacityAnimation();\r\n                this.animateOpacity();\r\n              }}\r\n              id=\"new-quote\"\r\n              title=\"Load new quote\"\r\n            >\r\n              New Quote\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteMachine;\r\n","import React, { Component } from \"react\";\nimport QuoteMachine from \"./quoteMachine\";\n\nclass App extends Component {\n  state = {\n    currentColor: \"#e74c3c\",\n    colors: [\n      \"#16a085\",\n      \"#27ae60\",\n      \"#2c3e50\",\n      \"#f39c12\",\n      \"#e74c3c\",\n      \"#9b59b6\",\n      \"#FB6964\",\n      \"#342224\",\n      \"#472E32\",\n      \"#BDBB99\",\n      \"#77B1A9\",\n      \"#73A857\"\n    ]\n  };\n\n  componentDidMount() {\n    this.changeColor();\n  }\n\n  changeColor = () => {\n    this.setState({\n      currentColor: this.state.colors[\n        Math.floor(Math.random() * this.state.colors.length)\n      ]\n    });\n  };\n\n  applyColorChange = () => {\n    document.getElementById(\n      \"body\"\n    ).style.backgroundColor = this.state.currentColor;\n    document.getElementById(\"body\").style.color = this.state.currentColor;\n  };\n  render() {\n    this.applyColorChange();\n    return (\n      <div className=\"App\" id=\"app\">\n        <QuoteMachine id=\"machine\" changeColor={this.changeColor} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}